# This Python file uses the following encoding: utf-8import jsonimport loggingfrom collections import OrderedDictfrom rest_framework.renderers import JSONRendererfrom rest_framework.response import Responsefrom rest_framework.views import APIViewfrom bs4 import BeautifulSoupfrom urllib.request import Request, urlopenimport reimport jsonfrom .models import Cmdatalog = logging.getLogger(__name__)# log.debug("")FLOAT_DATA_FORMAT = '{:,.2f}'class FilterCrimeListJson(APIView):	renderer_classes = (JSONRenderer,)		@staticmethod	def get(request):		crimecat = int(request.GET.get('crimecat'))				if crimecat == 0:			filtered_crimes = Cmdata.objects.all()			data_list = []			auto_id = 0			for entry in filtered_crimes:				log.debug(entry.crimecat)								it = entry.issuetime				it.strftime('%Y-%m-%d %H:%M')				it = str(it)[0:16]				data_list.append(					{'id': auto_id,					 'issue_time': it,					 'location': entry.location,					 'crime': entry.crime,					 'crimecat': entry.crimecat,					 'latitude': entry.latitude,					 'longitude': entry.longitude,					 'title': entry.title,					 'URL': entry.URL}				)								auto_id += 1			length_of_records = auto_id						content = {'data_list': data_list, 'length_of_records': length_of_records}						return Response(content)				elif crimecat == 1:			crimecat = u"robbery"						log.debug("==")			log.debug(crimecat)						filtered_crimes = Cmdata.objects.filter(crimecat=crimecat)			data_list = []			auto_id = 0			for entry in filtered_crimes:				log.debug(entry.crimecat)								it = entry.issuetime				log.debug(it)								it.strftime('%Y-%m-%d %H:%M')				it = str(it)[0:16]								data_list.append(					{'id': auto_id,					 'issue_time': it,					 'location': entry.location,					 'crime': entry.crime,					 'crimecat': entry.crimecat,					 'latitude': entry.latitude,					 'longitude': entry.longitude,					 'title': entry.title,					 'URL': entry.URL}				)								auto_id += 1			length_of_records = auto_id						content = {'data_list': data_list, 'length_of_records': length_of_records}						return Response(content)				elif crimecat == 2:			crimecat = u"violent crime"						filtered_crimes = Cmdata.objects.filter(crimecat=crimecat)			data_list = []			auto_id = 0			for entry in filtered_crimes:				log.debug(entry.crimecat)								it = entry.issuetime				it.strftime('%Y-%m-%d %H:%M')				it = str(it)[0:16]				data_list.append(					{'id': auto_id,					 'issue_time': it,					 'location': entry.location,					 'crime': entry.crime,					 'crimecat': entry.crimecat,					 'latitude': entry.latitude,					 'longitude': entry.longitude,					 'title': entry.title,					 'URL': entry.URL}				)								auto_id += 1			length_of_records = auto_id						content = {'data_list': data_list, 'length_of_records': length_of_records}						return Response(content)				elif crimecat == 3:			crimecat = u"burglary"						filtered_crimes = Cmdata.objects.filter(crimecat=crimecat)			data_list = []			auto_id = 0			for entry in filtered_crimes:				log.debug(entry.crimecat)								it = entry.issuetime				it.strftime('%Y-%m-%d %H:%M')				it = str(it)[0:16]				data_list.append(					{'id': auto_id,					 'issue_time': it,					 'location': entry.location,					 'crime': entry.crime,					 'crimecat': entry.crimecat,					 'latitude': entry.latitude,					 'longitude': entry.longitude,					 'title': entry.title,					 'URL': entry.URL}				)								auto_id += 1			length_of_records = auto_id						content = {'data_list': data_list, 'length_of_records': length_of_records}						return Response(content)				elif crimecat == 4:			crimecat = u"wounding and serious assault"						filtered_crimes = Cmdata.objects.filter(crimecat=crimecat)			data_list = []			auto_id = 0			for entry in filtered_crimes:				log.debug(entry.crimecat)								it = entry.issuetime				it.strftime('%Y-%m-%d %H:%M')				it = str(it)[0:16]				data_list.append(					{'id': auto_id,					 'issue_time': it,					 'location': entry.location,					 'crime': entry.crime,					 'crimecat': entry.crimecat,					 'latitude': entry.latitude,					 'longitude': entry.longitude,					 'title': entry.title,					 'URL': entry.URL}				)								auto_id += 1			length_of_records = auto_id						content = {'data_list': data_list, 'length_of_records': length_of_records}						return Response(content)				elif crimecat == 5:			crimecat = u"criminal intimidation"						filtered_crimes = Cmdata.objects.filter(crimecat=crimecat)			data_list = []			auto_id = 0			for entry in filtered_crimes:				log.debug(entry.crimecat)								it = entry.issuetime				it.strftime('%Y-%m-%d %H:%M')				it = str(it)[0:16]				data_list.append(					{'id': auto_id,					 'issue_time': it,					 'location': entry.location,					 'crime': entry.crime,					 'crimecat': entry.crimecat,					 'latitude': entry.latitude,					 'longitude': entry.longitude,					 'title': entry.title,					 'URL': entry.URL}				)								auto_id += 1			length_of_records = auto_id						content = {'data_list': data_list, 'length_of_records': length_of_records}						return Response(content)				elif crimecat == 6:			crimecat = u"rape"						filtered_crimes = Cmdata.objects.filter(crimecat=crimecat)			data_list = []			auto_id = 0			for entry in filtered_crimes:				log.debug(entry.crimecat)								it = entry.issuetime				it.strftime('%Y-%m-%d %H:%M')				it = str(it)[0:16]				data_list.append(					{'id': auto_id,					 'issue_time': it,					 'location': entry.location,					 'crime': entry.crime,					 'crimecat': entry.crimecat,					 'latitude': entry.latitude,					 'longitude': entry.longitude,					 'title': entry.title,					 'URL': entry.URL}				)								auto_id += 1			length_of_records = auto_id						content = {'data_list': data_list, 'length_of_records': length_of_records}						return Response(content)				elif crimecat == 7:			crimecat = u"serious drug offenses"						filtered_crimes = Cmdata.objects.filter(crimecat=crimecat)			data_list = []			auto_id = 0			for entry in filtered_crimes:				log.debug(entry.crimecat)								it = entry.issuetime				it.strftime('%Y-%m-%d %H:%M')				it = str(it)[0:16]				data_list.append(					{'id': auto_id,					 'issue_time': it,					 'location': entry.location,					 'crime': entry.crime,					 'crimecat': entry.crimecat,					 'latitude': entry.latitude,					 'longitude': entry.longitude,					 'title': entry.title,					 'URL': entry.URL}				)								auto_id += 1			length_of_records = auto_id						content = {'data_list': data_list, 'length_of_records': length_of_records}						return Response(content)class AirportDeparture(APIView):	renderer_classes = (JSONRenderer,)		@staticmethod	def get(request):		req = Request(			'http://www.hongkongairport.com/flightinfo/eng/real_depinfo.do',			headers={'User-Agent': 'Mozilla/5.0'})		page = urlopen(req).read()				soup = BeautifulSoup(page, 'lxml')		for x in soup.find_all("td"):			if len(x.text) == 0:				x.extract()		for y in soup.find_all(mr='true'):			y.extract()		collection = soup.find_all("tr")		time_format = re.compile('.{2}:.{2}')		result = []		status_code = 0  # only status == 0 is good to go		for i in collection:			t = {}			s = {}			td_set = i.find_all('td')			length = len(i.find_all('td'))			if length != 8:  # tag numbers should be 6				status_code = 1				s["status"] = status_code				break			single_list = []			for single in td_set:				single_list.append(single.text)			data = single_list[6]			data1 = single_list[1]			fields = data.split(",")			fields1 = data1.split(",")			selection = fields[1]			selection1 = fields1[0]			try:				time = single_list[0]				if len(time) == 5:					if time_format.match(time):						pass					else:						status_code = 2						s["status"] = status_code						break				else:					status_code = 3					s["status"] = status_code					break			except IndexError:				status_code = 4				s["status"] = status_code				break			flight = selection1			des = single_list[2]			airline = selection			# print(single_list[7])			if "Dep" in single_list[7]:				status = single_list[7][0:9]			elif "Gate" in single_list[7]:				status = single_list[7][0:11]			elif "BoardingSoon" in single_list[7]:				status = single_list[7][0:12]			elif "Final" in single_list[7]:				status = single_list[7][0:10]			try:				if (status != '\xa0') and ("Dep" in status):					t["Time"] = time  #					t["Flight"] = flight  #					t["destination"] = des  #					t["Airline"] = airline  #					t["Status"] = status  #					result.append(t)			except:				pass		if status_code == 0:			print(json.dumps({"DataList": {'Root': result}}, sort_keys=False))		else:			print()		#		content = {"DataList": {'Root': result}}				return Response(content)